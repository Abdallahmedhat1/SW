
SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8f  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f8  00000000  00000000  00001207  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000656  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e6  00000000  00000000  0000263a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 98 01 	call	0x330	; 0x330 <main>
  64:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_SetPinDirection>:
#include "BIT_MATH.h" 
#include "DIO_PRIVATE.h"

void Dio_SetPinDirection(u8 port,u8 pin,u8 Direction)
{
	if(Direction==DIO_PIN_OUTPUT)
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <Dio_SetPinDirection+0x6c>
	{
		switch(port)
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <Dio_SetPinDirection+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <Dio_SetPinDirection+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <Dio_SetPinDirection+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <Dio_SetPinDirection+0x56>
  7e:	08 95       	ret
		{
		 case DIO_PORTA:
		  SET_BIT(DDRA,pin);
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <Dio_SetPinDirection+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <Dio_SetPinDirection+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
		     break;
  94:	08 95       	ret
	      case DIO_PORTB:
			SET_BIT(DDRB,pin);
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <Dio_SetPinDirection+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <Dio_SetPinDirection+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
			break;
  aa:	08 95       	ret
				case DIO_PORTC:
				SET_BIT(DDRC,pin);
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_SetPinDirection+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_SetPinDirection+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
				break;
  c0:	08 95       	ret
					case DIO_PORTD:
					SET_BIT(DDRD,pin);
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <Dio_SetPinDirection+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <Dio_SetPinDirection+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
					break;
  d6:	08 95       	ret
		}
	}
	else if(Direction==DIO_PIN_INPUT)
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <Dio_SetPinDirection+0xde>
	{
		switch(port)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <Dio_SetPinDirection+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <Dio_SetPinDirection+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <Dio_SetPinDirection+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <Dio_SetPinDirection+0xc8>
  ea:	08 95       	ret
		{
			  case DIO_PORTA:
		      	CLR_BIT(DDRA,pin);
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Dio_SetPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <Dio_SetPinDirection+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
		     	break;
 102:	08 95       	ret
			    case DIO_PORTB:
			      CLR_BIT(DDRB,pin);
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <Dio_SetPinDirection+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <Dio_SetPinDirection+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
			        break;
 11a:	08 95       	ret
			         case DIO_PORTC:
			           CLR_BIT(DDRC,pin);
 11c:	24 b3       	in	r18, 0x14	; 20
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <Dio_SetPinDirection+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <Dio_SetPinDirection+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
			           break;
 132:	08 95       	ret
			             case DIO_PORTD:
			                CLR_BIT(DDRD,pin);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_SetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_SetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <Dio_SetPinValue>:
	}
	
}
void Dio_SetPinValue(u8 port,u8 pin,u8 value)
{
	if(value==DIO_PIN_HIGH)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	a1 f5       	brne	.+104    	; 0x1b8 <Dio_SetPinValue+0x6c>
	{
		switch(port)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	89 f0       	breq	.+34     	; 0x176 <Dio_SetPinValue+0x2a>
 154:	28 f0       	brcs	.+10     	; 0x160 <Dio_SetPinValue+0x14>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c9 f0       	breq	.+50     	; 0x18c <Dio_SetPinValue+0x40>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	11 f1       	breq	.+68     	; 0x1a2 <Dio_SetPinValue+0x56>
 15e:	08 95       	ret
		{
			     case DIO_PORTA:
			           SET_BIT(PORTA,pin);
 160:	2b b3       	in	r18, 0x1b	; 27
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <Dio_SetPinValue+0x20>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <Dio_SetPinValue+0x1c>
 170:	82 2b       	or	r24, r18
 172:	8b bb       	out	0x1b, r24	; 27
			             break;
 174:	08 95       	ret
			              case DIO_PORTB:
			                 SET_BIT(PORTB,pin);
 176:	28 b3       	in	r18, 0x18	; 24
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <Dio_SetPinValue+0x36>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <Dio_SetPinValue+0x32>
 186:	82 2b       	or	r24, r18
 188:	88 bb       	out	0x18, r24	; 24
			                     break;
 18a:	08 95       	ret
			                        case DIO_PORTC:
			                            SET_BIT(PORTC,pin);
 18c:	25 b3       	in	r18, 0x15	; 21
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_SetPinValue+0x4c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_SetPinValue+0x48>
 19c:	82 2b       	or	r24, r18
 19e:	85 bb       	out	0x15, r24	; 21
			                                   break;
 1a0:	08 95       	ret
			                            case DIO_PORTD:
			                               SET_BIT(PORTD,pin);
 1a2:	22 b3       	in	r18, 0x12	; 18
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Dio_SetPinValue+0x62>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Dio_SetPinValue+0x5e>
 1b2:	82 2b       	or	r24, r18
 1b4:	82 bb       	out	0x12, r24	; 18
			                                      break;
 1b6:	08 95       	ret
		}
	}
	else if(value==DIO_PIN_LOW)
 1b8:	41 11       	cpse	r20, r1
 1ba:	37 c0       	rjmp	.+110    	; 0x22a <Dio_SetPinValue+0xde>
	{
		switch(port)
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 f0       	breq	.+36     	; 0x1e4 <Dio_SetPinValue+0x98>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <Dio_SetPinValue+0x80>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	d9 f0       	breq	.+54     	; 0x1fc <Dio_SetPinValue+0xb0>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	29 f1       	breq	.+74     	; 0x214 <Dio_SetPinValue+0xc8>
 1ca:	08 95       	ret
		{
			                    case DIO_PORTA:
			                      CLR_BIT(PORTA,pin);
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <Dio_SetPinValue+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <Dio_SetPinValue+0x88>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	8b bb       	out	0x1b, r24	; 27
			                          break;
 1e2:	08 95       	ret
			                         case DIO_PORTB:
			                          CLR_BIT(PORTB,pin);
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <Dio_SetPinValue+0xa4>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <Dio_SetPinValue+0xa0>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	88 bb       	out	0x18, r24	; 24
			                             break;
 1fa:	08 95       	ret
			                              case DIO_PORTC:
			                                 CLR_BIT(PORTC,pin);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <Dio_SetPinValue+0xbc>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <Dio_SetPinValue+0xb8>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
			                                      break;
 212:	08 95       	ret
			                                    case DIO_PORTD:
			                                        CLR_BIT(PORTD,pin);
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <Dio_SetPinValue+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <Dio_SetPinValue+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret

0000022c <Dio_GetPinValue>:
	
}
u8 Dio_GetPinValue(u8 port,u8 pin)
{
	u8 loc_status=0;
		switch(port)
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	d1 f0       	breq	.+52     	; 0x264 <Dio_GetPinValue+0x38>
 230:	28 f0       	brcs	.+10     	; 0x23c <Dio_GetPinValue+0x10>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	59 f1       	breq	.+86     	; 0x28c <Dio_GetPinValue+0x60>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	e9 f1       	breq	.+122    	; 0x2b4 <Dio_GetPinValue+0x88>
 23a:	50 c0       	rjmp	.+160    	; 0x2dc <Dio_GetPinValue+0xb0>
		{
			         case DIO_PORTA:
			              loc_status= GET_BIT(PINA,pin);
 23c:	49 b3       	in	r20, 0x19	; 25
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	9c 01       	movw	r18, r24
 244:	06 2e       	mov	r0, r22
 246:	02 c0       	rjmp	.+4      	; 0x24c <Dio_GetPinValue+0x20>
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <Dio_GetPinValue+0x1c>
 250:	84 2f       	mov	r24, r20
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	82 23       	and	r24, r18
 256:	93 23       	and	r25, r19
 258:	02 c0       	rjmp	.+4      	; 0x25e <Dio_GetPinValue+0x32>
 25a:	95 95       	asr	r25
 25c:	87 95       	ror	r24
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <Dio_GetPinValue+0x2e>
			                    break;
 262:	08 95       	ret
			                       case DIO_PORTB:
			                          loc_status= GET_BIT(PINB,pin);
 264:	46 b3       	in	r20, 0x16	; 22
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9c 01       	movw	r18, r24
 26c:	06 2e       	mov	r0, r22
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Dio_GetPinValue+0x48>
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <Dio_GetPinValue+0x44>
 278:	84 2f       	mov	r24, r20
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	82 23       	and	r24, r18
 27e:	93 23       	and	r25, r19
 280:	02 c0       	rjmp	.+4      	; 0x286 <Dio_GetPinValue+0x5a>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <Dio_GetPinValue+0x56>
			                                  break;
 28a:	08 95       	ret
			                                   case DIO_PORTC:
			                                   loc_status=  GET_BIT(PINC,pin);
 28c:	43 b3       	in	r20, 0x13	; 19
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 01       	movw	r18, r24
 294:	06 2e       	mov	r0, r22
 296:	02 c0       	rjmp	.+4      	; 0x29c <Dio_GetPinValue+0x70>
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <Dio_GetPinValue+0x6c>
 2a0:	84 2f       	mov	r24, r20
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	82 23       	and	r24, r18
 2a6:	93 23       	and	r25, r19
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Dio_GetPinValue+0x82>
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Dio_GetPinValue+0x7e>
			                                          break;
 2b2:	08 95       	ret
			                                            case DIO_PORTD:
														loc_status=  GET_BIT(PIND,pin);
 2b4:	40 b3       	in	r20, 0x10	; 16
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	9c 01       	movw	r18, r24
 2bc:	06 2e       	mov	r0, r22
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <Dio_GetPinValue+0x98>
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <Dio_GetPinValue+0x94>
 2c8:	84 2f       	mov	r24, r20
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	82 23       	and	r24, r18
 2ce:	93 23       	and	r25, r19
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Dio_GetPinValue+0xaa>
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Dio_GetPinValue+0xa6>
			                                                  break;
 2da:	08 95       	ret
	}
	
}
u8 Dio_GetPinValue(u8 port,u8 pin)
{
	u8 loc_status=0;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
			                                            case DIO_PORTD:
														loc_status=  GET_BIT(PIND,pin);
			                                                  break;
		}
	                                                          return loc_status;
}
 2de:	08 95       	ret

000002e0 <LED_Init>:
 * Created: 7/2/2023 2:13:29 PM
 *  Author: Abdallah Medhat
 */ 
#include "LED_interface.h"
void LED_Init   (LED_Type LED_Configuration)
{
 2e0:	86 2f       	mov	r24, r22
 2e2:	67 2f       	mov	r22, r23
	
	Dio_SetPinDirection(LED_Configuration.Port,LED_Configuration.Pin,DIO_PIN_OUTPUT);
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
 2ea:	08 95       	ret

000002ec <LED_On>:
}



void LED_On     (LED_Type LED_Configuration)
   {
 2ec:	96 2f       	mov	r25, r22
	            if(LED_Configuration.Active_State==ACTIVE_HIGH)
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	31 f4       	brne	.+12     	; 0x2fe <LED_On+0x12>
                            	{
	                               	Dio_SetPinValue(LED_Configuration.Port,LED_Configuration.Pin,DIO_PIN_HIGH);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	67 2f       	mov	r22, r23
 2f6:	89 2f       	mov	r24, r25
 2f8:	0e 94 a6 00 	call	0x14c	; 0x14c <Dio_SetPinValue>
 2fc:	08 95       	ret
	                                }
	                             else if(LED_Configuration.Active_State==ACTIVE_LOW)
 2fe:	81 11       	cpse	r24, r1
 300:	05 c0       	rjmp	.+10     	; 0x30c <LED_On+0x20>
	                            {
		                                Dio_SetPinValue(LED_Configuration.Port,LED_Configuration.Pin,DIO_PIN_LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	67 2f       	mov	r22, r23
 306:	89 2f       	mov	r24, r25
 308:	0e 94 a6 00 	call	0x14c	; 0x14c <Dio_SetPinValue>
 30c:	08 95       	ret

0000030e <LED_Off>:
  }
  
  
  
void LED_Off    (LED_Type LED_Configuration)
 {
 30e:	96 2f       	mov	r25, r22
	                     if(LED_Configuration.Active_State==ACTIVE_HIGH)
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	31 f4       	brne	.+12     	; 0x320 <LED_Off+0x12>
	               {
		                  Dio_SetPinValue(LED_Configuration.Port,LED_Configuration.Pin,DIO_PIN_LOW);
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	67 2f       	mov	r22, r23
 318:	89 2f       	mov	r24, r25
 31a:	0e 94 a6 00 	call	0x14c	; 0x14c <Dio_SetPinValue>
 31e:	08 95       	ret
	                  }
	                                else if(LED_Configuration.Active_State==ACTIVE_LOW)
 320:	81 11       	cpse	r24, r1
 322:	05 c0       	rjmp	.+10     	; 0x32e <LED_Off+0x20>
	                          {
		                          Dio_SetPinValue(LED_Configuration.Port,LED_Configuration.Pin,DIO_PIN_HIGH);
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	67 2f       	mov	r22, r23
 328:	89 2f       	mov	r24, r25
 32a:	0e 94 a6 00 	call	0x14c	; 0x14c <Dio_SetPinValue>
 32e:	08 95       	ret

00000330 <main>:


int main(void)
{
	
	LED_Type LED={DIO_PORTA,DIO_PIN2,ACTIVE_HIGH};
 330:	e1 2c       	mov	r14, r1
 332:	68 94       	set
 334:	ff 24       	eor	r15, r15
 336:	f1 f8       	bld	r15, 1
 338:	01 e0       	ldi	r16, 0x01	; 1
		
    SW_Type SW={DIO_PORTA,DIO_PIN0,SW_Ext_PULL_DOWN };
 33a:	10 e0       	ldi	r17, 0x00	; 0
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	c2 e0       	ldi	r28, 0x02	; 2
		
		SW_Init(SW);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 bf 01 	call	0x37e	; 0x37e <SW_Init>
		
		LED_Init(LED);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	72 e0       	ldi	r23, 0x02	; 2
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_Init>
		
    while (1) 
    {
		u8 read_Sw=0;
		
		 read_Sw=SW_u8GetPressed (SW);
 354:	61 2f       	mov	r22, r17
 356:	7d 2f       	mov	r23, r29
 358:	8c 2f       	mov	r24, r28
 35a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SW_u8GetPressed>
		
		if(read_Sw==1)
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	31 f4       	brne	.+12     	; 0x36e <main+0x3e>
		{
			LED_On(LED);
 362:	6e 2d       	mov	r22, r14
 364:	7f 2d       	mov	r23, r15
 366:	80 2f       	mov	r24, r16
 368:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED_On>
 36c:	f3 cf       	rjmp	.-26     	; 0x354 <main+0x24>
		}
		
		else if(read_Sw==0)
 36e:	81 11       	cpse	r24, r1
 370:	f1 cf       	rjmp	.-30     	; 0x354 <main+0x24>
		{
			LED_Off(LED);
 372:	6e 2d       	mov	r22, r14
 374:	7f 2d       	mov	r23, r15
 376:	80 2f       	mov	r24, r16
 378:	0e 94 87 01 	call	0x30e	; 0x30e <LED_Off>
 37c:	eb cf       	rjmp	.-42     	; 0x354 <main+0x24>

0000037e <SW_Init>:
/*
* Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
* Parameters :   => struct has the switch porn , pin , status
* return : void
*/
void SW_Init      ( SW_Type SW_Config ){
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	c6 2f       	mov	r28, r22
 386:	d7 2f       	mov	r29, r23
 388:	18 2f       	mov	r17, r24
	
	Dio_SetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	67 2f       	mov	r22, r23
 38e:	8c 2f       	mov	r24, r28
 390:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	
	/* If Sw is Internal Pull Up */
	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
 394:	11 11       	cpse	r17, r1
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <SW_Init+0x24>
		
		Dio_SetPinValue( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	6d 2f       	mov	r22, r29
 39c:	8c 2f       	mov	r24, r28
 39e:	0e 94 a6 00 	call	0x14c	; 0x14c <Dio_SetPinValue>
		
		/* we could use DIO_enumConnectPullup */
	}
	
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	08 95       	ret

000003aa <SW_u8GetPressed>:
* Breif : This Function read Button status
* Parameters :   => struct has the switch porn , pin , status
* return : switch status
*/

  u8 SW_u8GetPressed ( SW_Type SW_Config ){
 3aa:	96 2f       	mov	r25, r22
/*
	u8 LOC_u8Result = SW_NOT_PRESSED ;
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
	*/

	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	48 f4       	brcc	.+18     	; 0x3c2 <SW_u8GetPressed+0x18>
	{
	  read_value=Dio_GetPinValue( SW_Config.Port , SW_Config.Pin );
 3b0:	67 2f       	mov	r22, r23
 3b2:	89 2f       	mov	r24, r25
 3b4:	0e 94 16 01 	call	0x22c	; 0x22c <Dio_GetPinValue>
		
		if (read_value==0)
 3b8:	88 23       	and	r24, r24
 3ba:	51 f0       	breq	.+20     	; 0x3d0 <SW_u8GetPressed+0x26>
		{
			read_value = SW_PRESSED ;
		}
		else if (read_value==1)
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	69 f4       	brne	.+26     	; 0x3da <SW_u8GetPressed+0x30>
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <SW_u8GetPressed+0x2a>
		{
			read_value = SW_NOT_PRESSED ;
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	49 f4       	brne	.+18     	; 0x3d8 <SW_u8GetPressed+0x2e>
	{
		read_value=	Dio_GetPinValue( SW_Config.Port , SW_Config.Pin);
 3c6:	67 2f       	mov	r22, r23
 3c8:	89 2f       	mov	r24, r25
 3ca:	0e 94 16 01 	call	0x22c	; 0x22c <Dio_GetPinValue>
 3ce:	08 95       	ret
	{
	  read_value=Dio_GetPinValue( SW_Config.Port , SW_Config.Pin );
		
		if (read_value==0)
		{
			read_value = SW_PRESSED ;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	08 95       	ret
		}
		else if (read_value==1)
		{
			read_value = SW_NOT_PRESSED ;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret
* return : switch status
*/

  u8 SW_u8GetPressed ( SW_Type SW_Config ){
	
u8 read_value=0;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return read_value ;
	
 3da:	08 95       	ret

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
